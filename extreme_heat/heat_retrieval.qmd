---
title: "Accessing Extreme Heat Days for all districts at RCP 8.5"
format: html
author: "Charlie Curtin"
---

```{r, message = FALSE}
# load libraries
library(devtools)
library(caladaptr)
library(tidyverse)
library(sf)
library(here)
library(progress) # for loop progress bar
library(lubridate)

# install caladaptr to construct an API request for climate data from Cal-Adapt
#devtools::install_github("ucanr-igis/caladaptr")
```

An extreme heat day is calculated as a day in which the maximum daily temperature exceeds 96 F. This threshold represents the 98th percentile value of maximum daily temperature for California school districts based on observed temperature data from 1961-1990. The threshold is calculated in `extreme_heat/extreme_heat_threshold.qmd`.

```{r}
# read in school districts, validate geometry, and change the crs to WGS 1984
districts <- st_read(here("data", "school_districts"), quiet = TRUE) %>% 
  st_make_valid() %>% 
  st_transform(crs = 4326)
```

To determine the number of projected extreme heat days for each district between 2030-2035 under RCP 8.5, we are going to retrieve daily projected temperature values from Cal-Adapt for each district for RCP 8.5 and 4 different GCMs that fit California's climate the best. The 4 GCMs (info from Cal-Adapt) represent 4 different future projected climate scenarios: a cool scenario, a warm scenario, an average scenario, and one least like the others to improve coverage over a range of values.

Then, we are going to average the 4 GCMs for each daily value and assign a binary 1 or 0, 1 meaning that the projected temperature exceeds that threshold, 0 being that it doesn't exceed that threshold. The number of projected extreme heat days for each school district is simply the sum of 1s for each district. This all happens within a for loop, as retrieving the daily values is a massive amount of data (about 8.2 million records). The data is retrieved from Cal-Adapt, from the Pierce et al. dataset (?????). We are going to use the district polygons. As our shapes.

# Determing the number of extreme heat days with a for loop

```{r}
# create an empty data frame to populate with the number of extreme heat days
extreme_heat_days <- data.frame()

# create an empty vector to store the codes of districts that encounter an error with the for loop
temp_errors <- c()

# create a progress bar for our for loop
pb <- progress_bar$new(
  format = "  [:bar] :current/:total (:percent) elapsed: :elapsed full",
  total = nrow(districts), clear = FALSE, width = 60
)

# retrieve data using the Cal-Adapt API in a for loop
for (code in districts$CDSCode) {
   
  # iterate through one row at a time
  df <- districts %>% 
    filter(CDSCode == code)
  
  # wrap in tryCatch function, which tells the for loop to continue iterating if it encounters an error
  tryCatch({
    # create the API request
    request <-  ca_loc_sf(loc = df, idfld = "CDSCode") %>% 
      # select our variable of interest, where "tasmax" is maximum temperature
      ca_cvar(cvar = "tasmax") %>% 
      # select RCP 8.5 scenario
      ca_scenario(c("rcp85")) %>% 
      # select 4 GCMs of interest
      ca_gcm(gcms[1:4]) %>% 
      # select daily values
      ca_period("day") %>% 
      # select period of interest
      ca_years(start = 2030, end = 2035)
    
    # calculate whether a day is an extreme heat day or not
    districts_temp <- request %>% 
      # extract values from request as a table, converting values to be numeric
      ca_getvals_tbl(quiet = TRUE) %>% 
      mutate(val = as.numeric(val)) %>% 
      # assign a 1 to each daily value for each school district if ANY projected temperature from any of the 4 GCMs exceeds the threshold
      group_by(CDSCode, dt) %>% 
      summarize(threshold = ifelse(any(val > 308.52), 1, 0)) %>%
      # count the number of extreme heat days
      group_by(CDSCode) %>% 
      summarize(count = sum(threshold))
    
    # bind results from each iteration to our empty dataframe we defined outside of the for loop
    extreme_heat_days <- rbind(extreme_heat_days, districts_temp)
    
    },
    error = function(e) {
      # store the district code in error_districts if there's an error
      temp_errors <<- c(temp_errors, code)
    })
  
  # update progress bar
  pb$tick()
  
} # end for loop

# export CSV
#write_csv(extreme_heat_days, here("data", "extreme_heat", "intermediate", "extreme_heat_days_noerrors.csv"))
```

We encountered an error with 11 districts. My hypothesis is that because Long Beach Unified also includes schools on Catalina Island, the district centroid is placed in the Pacific Ocean, which is outside of Cal-Adapt's area of coverage. The CDSCode for this is 19647250000000. We are going to filter for that district, generate 25 random points within it's boundaries, and conduct the same process. Then we'll join that data back to the extreme heat days table.
###DESCRIPTION NEEDS UPDATING

```{r}
# filter for districts that encounter an error
error_districts <- districts %>% 
  filter(CDSCode %in% temp_errors)

# create an empty dataframe to populate with the number of extreme heat days
extreme_heat_days_errors <- data.frame()

# create a progress bar for our for loop
pb <- progress_bar$new(
  format = "  [:bar] :current/:total (:percent) elapsed: :elapsed full",
  total = nrow(districts), clear = FALSE, width = 60
)

# create a for loop for school districts
for (code in error_districts$CDSCode) {
  
  # iterate through one row at a time
  df <- error_districts %>% 
    filter(CDSCode == code)
  
  # generate 5 random points for each district and convert to coordinates
  errors_points <- st_sample(error_districts, 5)
  
  errors_points <- st_transform(errors_points, crs = "EPSG:4326" ) %>% 
    st_coordinates()
  
  # wrap in tryCatch function, which tells the for loop to continue iterating if it encounters an error
  tryCatch({
    # create the API request
    request <-  ca_loc_pt(coords = errors_points) %>% 
      # select our variable of interest, where "tasmax" is maximum temperature
      ca_cvar(cvar = "tasmax") %>% 
      # select RCP 8.5 scenario
      ca_scenario(c("rcp85")) %>% 
      # select 4 GCMs of interest
      ca_gcm(gcms[1:4]) %>% 
      # select daily values
      ca_period("day") %>% 
      # select period of interest
      ca_years(start = 2030, end = 2035)
    
    # average the values of the 5 points for each district
    errors_temp <- request %>% 
      ca_getvals_tbl(quiet = TRUE) %>% 
      mutate(val = as.numeric(val)) %>% 
      group_by(gcm, dt) %>% 
      summarise(val = mean(val)) %>% 
      # assign a 1 to each daily value for each school district if ANY projected temperature from any of the 4 GCMs exceeds the threshold
      group_by(dt) %>% 
      summarize(threshold = ifelse(any(val > 308.52), 1, 0)) %>% 
      # count the number of extreme heat days
      summarize(count = sum(threshold))
    
    # assign CDSCode back to the point
    errors_temp$CDSCode <- code
    
    # bind results from each iteration together
    extreme_heat_days_errors <- rbind(extreme_heat_days_errors, errors_temp)
    
  },
  error = function(e) {
    # store the district code in error_districts if there's an error
    #temp_errors <<- c(temp_errors, code)
  })
  
  # update progress bar
  pb$tick()
  
} # end for loop

# export results to data folder
#write_csv(extreme_heat_days_errors, here("data", "extreme_heat", "intermediate", "extreme_heat_days_errors.csv"))
```

# bind dataframes together and join back to full school districts data
```{r}
# bind the errors and noerrors dataframes together and export to data folder
extreme_heat_days_full <- rbind(extreme_heat_days_noerrors, extreme_heat_days_errors)

#write_csv(extreme_heat_days_full, here("data", "extreme_heat", "intermediate", "extreme_heat_days_full.csv"))

# join back to school districts dataframe
districts <- st_read(here("data", "school_districts"), quiet = TRUE)

districts_heat <- left_join(districts, extreme_heat_days_full, by = "CDSCode") %>% 
  mutate(heat_days = count) %>% 
  select(CDSCode, CountyName, DistrictNa, DistrictTy, heat_days)

# export to data folder
write_csv(districts_heat, here("data", "hazard_summary", "individual_tables", "districts_heat.csv"))
```

# test- the number of extreme heat days under different ways of treating GCMs

```{r}
# leads to 0 extreme heat days when you average the values for each of the 4 GCMs
test <- errors_temp %>% 
  group_by(dt) %>% 
  summarise(avg_temp = mean(val)) %>% 
  mutate(threshold = ifelse(avg_temp > 308.52, 1, 0)) %>% 
  summarise(count = sum(threshold))

# leads to 192 extreme days when you group by each date and assign it a 1 if any of the temp records from any of the GCMs is above the threshold
test2 <- errors_temp %>% 
  group_by(dt) %>%
  summarise(threshold = ifelse(any(val > 308.52), 1, 0)) %>% 
  summarise(count = sum(threshold))

# leads to 397 extreme heat days when you count up all of the extreme heat days under each GCM and divide by 4 (original method)
test3 <- errors_temp %>% 
  mutate(threshold = ifelse(val > 308.52, 1, 0)) %>% 
  mutate(threshold = threshold / 4) %>%
  summarise(count = sum(threshold))
```

