---
title: "Calculating the hazard summary score for every school district"
format: html
author: "Charlie Curtin"
---

```{r, message = FALSE}
# load libraries
library(tidyverse)
library(sf)
library(here)

# turn off scientific notation
options(scipen = 999)
```

# Bin by intervals

To calculate the hazard summary score, we are going to bin each individual hazard count to assign a score from 0-5

```{r}
## read in data

# school districts
districts <- st_read(here("data", "school_districts"), quiet = TRUE)

# climate hazards
heat <- read_csv(here("data", "hazard_summary", "individual_tables", "districts_heat.csv"))

precip <- read_csv(here("data", "hazard_summary", "individual_tables", "districts_precip.csv"))

wildfire <- read_csv(here("data", "hazard_summary", "individual_tables", "districts_whp.csv"))

flood <- read_csv(here("data", "hazard_summary", "individual_tables", "districts_flood.csv"))

slr <- read_csv(here("data", "hazard_summary", "individual_tables", "districts_slr.csv"))
```

# bin by interval

First, we are going to separate all the values of 0 and not 0 for each hazard for each district. Since wildfire hazard potential is on a scale from 0 to 5, we don't actually need to do anything for it.
```{r}
## separate observations from each dataframe into 0s and not 0

# rename whp to whp_score
wildfire <- wildfire %>% 
  rename(whp_score = whp)

# separate into 0s
heat_0 <- heat %>% 
  filter(heat_days == 0) %>%
  mutate(heat_score = heat_days) %>% 
  select(-geometry)

precip_0 <- precip %>% 
  filter(precip_days == 0) %>% 
  mutate(precip_score = precip_days) %>% 
  select(-geometry)

flood_0 <- flood %>% 
  filter(flood_percent == 0) %>% 
  mutate(flood_score = flood_percent)

slr_0 <- slr %>% 
  filter(slr_percent == 0) %>%
  mutate(slr_score = slr_percent)

# separate into values
heat_num <- heat %>% 
  filter(heat_days != 0) %>% 
  select(-geometry)

precip_num <- precip %>% 
  filter(precip_days != 0)

flood_num <- flood %>% 
  filter(flood_percent != 0)

slr_num <- slr %>% 
  filter(slr_percent != 0)

## bin the dataframes with values into intervals or quantiles. Since wildfire is already on a scale from 0-5, we don't need to transform it

# find equal intervals
heat_intervals <- heat_num %>% 
  mutate(heat_score = cut_interval(heat_days, n = 5, labels = c(1:5))) %>% 
  select(-geometry)

precip_intervals <- precip_num %>% 
  mutate(precip_score = cut_interval(precip_days, n = 5, labels = c(1:5))) %>% 
  select(-geometry)

flood_intervals <- flood_num %>% 
  mutate(flood_score = cut(flood_percent, 
                           breaks = seq(0, 100, by = 20),
                           labels = c(1:5),
                           include.lowest = TRUE))

slr_intervals <- slr_num %>% 
  mutate(slr_score = cut_interval(slr_percent, n = 5, labels = c(1:5)))

## row bind the intervals and 0s dataframes back together
heat <- rbind(heat_0, heat_intervals) %>% 
  mutate(heat_score = as.numeric(heat_score)) %>% 
  select(CDSCode, heat_days, heat_score)

precip <- rbind(precip_0, precip_intervals) %>% 
  mutate(precip_score = as.numeric(precip_score)) %>% 
  select(CDSCode, precip_days, precip_score)

wildfire <- wildfire %>% 
  mutate(whp_score = as.numeric(whp_score)) %>% 
  select(CDSCode, whp_score)

flood <- rbind(flood_0, flood_intervals) %>% 
  mutate(flood_score = as.numeric(flood_score)) %>% 
  select(CDSCode, flood_percent, flood_score)

slr <- rbind(slr_0, slr_intervals) %>% 
  mutate(slr_score = as.numeric(slr_score)) %>% 
  select(CDSCode, slr_percent, slr_score)

## join all of the tables together

# join tables
districts_hazards <- districts %>% 
  left_join(heat, by = "CDSCode") %>% 
  left_join(precip, by = "CDSCode") %>% 
  left_join(wildfire, by = "CDSCode") %>% 
  left_join(slr, by = "CDSCode") %>% 
  left_join(flood, by = "CDSCode")
```

# binning by interval for our older data

To bin the historic/past data, we use the same intervals as a reference

```{r}
# read in historic/past climate hazards data
heat_hist <- read_csv(here("data", "hazard_summary", "individual_tables", "districts_heat_hist.csv"))

precip_hist <- read_csv(here("data", "hazard_summary", "individual_tables", "districts_precip_hist.csv"))

wildfire_2012 <- read_csv(here("data", "hazard_summary", "individual_tables", "districts_whp_2012.csv"))

slr_2000 <- read_csv(here("data", "hazard_summary", "individual_tables", "districts_slr_2000.csv"))
```

```{r}
## separate observations from each dataframe into 0s and not 0 ------------------------------------------

# rename whp to whp_score
wildfire_hist <- wildfire_2012 %>% 
  rename(whp_score = whp_2012)

# separate into 0s
heat_0_hist <- heat_hist %>% 
  filter(heat_days == 0) %>%
  mutate(heat_score = heat_days) %>% 
  select(-geometry)

precip_0_hist <- precip_hist %>% 
  filter(precip_days == 0) %>% 
  mutate(precip_score = precip_days) %>% 
  select(-geometry)

slr_0_hist <- slr_2000 %>% 
  filter(slr_percent == 0) %>%
  mutate(slr_score = slr_percent)

# separate into values
heat_num_hist <- heat_hist %>% 
  filter(heat_days != 0)

precip_num_hist <- precip_hist %>% 
  filter(precip_days != 0)

slr_num_hist <- slr_2000 %>% 
  filter(slr_percent != 0)

## bin the dataframes with values into intervals based on the equal range intervals of the projected data. Since wildfire is already on a scale from 0-5, we don't need to transform it. --------------------------- 

# manually define intervals from projected data and use them as breaks to cut the historic data
heat_breaks <- cut_interval(heat_num$heat_days, n = 5) %>% 
  levels()

heat_breaks <- c(1, 240, 479, 719, 958, 1198)

precip_breaks <- cut_interval(precip_num$precip_days, n = 5) %>% 
  levels()

precip_breaks <- c(1, 176, 351, 525, 700, 876)

slr_breaks <- cut_interval(slr_num$slr_percent, n = 5) %>% 
  levels()

slr_breaks <- c(0, 11.9, 23.8, 35.8, 47.7, 59.7)

# bin the historic numeric dataframes
heat_intervals_hist <- heat_num_hist %>% 
  mutate(heat_score = cut(heat_days, breaks = heat_breaks, 
                          labels = c(1:5), include.lowest = TRUE)) %>% 
  select(-geometry)

precip_intervals_hist <- precip_num_hist %>% 
  mutate(precip_score = cut(precip_days, breaks = precip_breaks,
                            labels = c(1:5), include.lowest = TRUE)) %>% 
  select(-geometry)

slr_intervals_hist <- slr_num_hist %>% 
  mutate(slr_score = cut(slr_percent, breaks = slr_breaks,
                         labels = c(1:5), include.lowest = TRUE))

## row bind the intervals and 0s dataframes back together ---------------------------------------------
heat_hist <- rbind(heat_0_hist, heat_intervals_hist) %>% 
  mutate(heat_score = as.numeric(heat_score)) %>% 
  select(CDSCode, heat_days, heat_score) %>% 
  rename(heat_days_hist = heat_days,
         heat_score_hist = heat_score)

precip_hist <- rbind(precip_0_hist, precip_intervals_hist) %>% 
  mutate(precip_score = as.numeric(precip_score)) %>% 
  select(CDSCode, precip_days, precip_score) %>% 
  rename(precip_days_hist = precip_days,
         precip_score_hist = precip_score)

wildfire_hist <- wildfire_hist %>% 
  mutate(whp_score = as.numeric(whp_score)) %>% 
  select(CDSCode, whp_score) %>% 
  rename(whp_score_hist = whp_score)

slr_hist <- rbind(slr_0_hist, slr_intervals_hist) %>% 
  mutate(slr_score = as.numeric(slr_score)) %>% 
  select(CDSCode, slr_percent, slr_score) %>% 
  rename(slr_pct_hist = slr_percent,
         slr_score_hist = slr_score)

## join the table to the projected districts hazards dataframe -------------------------------------------
# join historic tables
districts_hazards_hist <- heat_hist %>% 
  left_join(precip_hist, by = "CDSCode") %>% 
  left_join(wildfire_hist, by = "CDSCode") %>% 
  left_join(slr_hist, by = "CDSCode")

# join to the districts hazards dataframe and reorder columns
districts_hazards <- districts_hazards %>% 
  left_join(districts_hazards_hist, by = "CDSCode")

districts_hazards <- districts_hazards %>% 
  relocate(hazard_score, .after = DistrictTy) %>% 
  relocate(heat_days_hist, .after = heat_days) %>% 
  relocate(heat_score_hist, .after = heat_score) %>% 
  relocate(precip_days_hist, .after = precip_days) %>% 
  relocate(precip_score_hist, .after = precip_score) %>% 
  relocate(whp_score_hist, .after = whp_score) %>% 
  relocate(slr_pct_hist, .after = slr_percent) %>% 
  relocate(slr_score_hist, .after = slr_score)
```

## calculate hazard summary score

```{r}
# calculate the hazard summary score for each district
districts_hazards <- districts_hazards %>%
  mutate(hazard_score = heat_score + precip_score + whp_score + slr_score + flood_score,
         hazard_score_hist = heat_score_hist + precip_score_hist + whp_score_hist + slr_score_hist + flood_score)
  relocate(hazard_score, .after = DistrictTy, 
           hazard_score_hist, .after = hazard_score)

## write output to the data folder
# geopackage to preserve field names
st_write(districts_hazards, here("data", "hazard_summary", "hazard_summary", "hazard_summary.gpkg"), append = FALSE)

# csv
districts_hazards %>% 
  st_drop_geometry() %>% 
  write_csv(here("data", "hazard_summary", "districts_hazards.csv"))
```

## summary statistics

Summary statistics correspond to Appendix B in the report. For the report, we need the min, max, and mean for every hazard metric, historical and projected. We also need the number of districts in each hazard score group, historical and projected, for every hazard. Lastly, we need the intervals that were used to determine the 0-5 hazard score for every hazard.

```{r}
# read in data
districts_hazards <- read_csv(here("data", "hazard_summary", "districts_hazards.csv"))

# calculate min, max, and mean for every hazard, historical and projected
hazards_sum <- districts_hazards %>%
  summarize(across(c(heat_days, heat_days_hist, precip_days, precip_days_hist, whp_score, whp_score_hist, slr_percent, slr_pct_hist, flood_percent), 
                   list(mean = ~mean(.x, na.rm = TRUE), 
                        min = ~min(.x, na.rm = TRUE), 
                        max = ~max(.x, na.rm = TRUE)))) %>% 
  pivot_longer(cols = everything(),
               names_to = "variable",
               values_to = "value")

# find the number of districts in each hazard score group for every hazard
group_counts <- districts_hazards %>% 
  pivot_longer(cols = c(heat_score, heat_score_hist, precip_score, precip_score_hist, whp_score, whp_score_hist, slr_score, slr_score_hist, flood_score),
               names_to = "variable",
               values_to = "group") %>% 
  group_by(variable, group) %>% 
  summarize(count = n())

# find the intervals for each hazard, not including whp (already 0-5)
interval_table <- data.frame(
  heat_days_int = cut_interval(districts_hazards$heat_days, n = 5) %>% levels(),
  precip_days_int = cut_interval(districts_hazards$precip_days, n = 5) %>% levels(),
  slr_pct_int = cut_interval(districts_hazards$slr_percent, n = 5) %>% levels(),
  flood_pct_int = cut_interval(districts_hazards$flood_percent, n = 5) %>% levels()
)
```






