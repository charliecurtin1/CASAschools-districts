---
title: "Calculating the hazard summary score for every school district"
format: html
author: "Charlie Curtin"
---

```{r}
# load libraries
library(tidyverse)
library(sf)
library(here)
library(tmap)

# turn off scientific notation
options(scipen = 999)
```

# Bin by intervals

To calculate the hazard summary score, we are going to bin each individual hazard count to assign a score from 0-5

```{r}
## read in data

# school districts
districts <- st_read(here("data", "school_districts"), quiet = TRUE)

# climate hazards
heat <- read_csv(here("data", "hazard_summary", "individual_tables", "districts_heat.csv"))

precip <- read_csv(here("data", "hazard_summary", "individual_tables", "districts_precip.csv"))

wildfire <- read_csv(here("data", "hazard_summary", "individual_tables", "districts_whp.csv"))

flood <- read_csv(here("data", "hazard_summary", "individual_tables", "districts_flood.csv"))

slr <- read_csv(here("data", "hazard_summary", "individual_tables", "districts_slr.csv"))
```

# bin by interval

First, we are going to separate all the values of 0 and not 0 for each hazard for each district. Since wildfire hazard potential is on a scale from 0 to 5, we don't actually need to do anything for it.
```{r}
## separate observations from each dataframe into 0s and not 0

# rename whp to whp_score
wildfire <- wildfire %>% 
  rename(whp_score = whp)

# separate into 0s
heat_0 <- heat %>% 
  filter(heat_days == 0) %>%
  mutate(heat_score = heat_days) %>% 
  select(-geometry)

precip_0 <- precip %>% 
  filter(precip_days == 0) %>% 
  mutate(precip_score = precip_days) %>% 
  select(-geometry)

flood_0 <- flood %>% 
  filter(flood_percent == 0) %>% 
  mutate(flood_score = flood_percent)

slr_0 <- slr %>% 
  filter(slr_percent == 0) %>%
  mutate(slr_score = slr_percent)

# separate into values
heat_num <- heat %>% 
  filter(heat_days != 0) %>% 
  select(-geometry)

precip_num <- precip %>% 
  filter(precip_days != 0)

flood_num <- flood %>% 
  filter(flood_percent != 0)

slr_num <- slr %>% 
  filter(slr_percent != 0)

## bin the dataframes with values into intervals or quantiles. Since wildfire is already on a scale from 0-5, we don't need to transform it

# find equal intervals
heat_intervals <- heat_num %>% 
  mutate(heat_score = cut_interval(heat_days, n = 5, labels = c(1:5))) %>% 
  select(-geometry)

precip_intervals <- precip_num %>% 
  mutate(precip_score = cut_interval(precip_days, n = 5, labels = c(1:5))) %>% 
  select(-geometry)

flood_intervals <- flood_num %>% 
  mutate(flood_score = cut(flood_percent, 
                           breaks = seq(0, 100, by = 20),
                           labels = c(1:5),
                           include.lowest = TRUE))

slr_intervals <- slr_num %>% 
  mutate(slr_score = cut_interval(slr_percent, n = 5, labels = c(1:5)))

## row bind the intervals and 0s dataframes back together
heat <- rbind(heat_0, heat_intervals) %>% 
  mutate(heat_score = as.numeric(heat_score)) %>% 
  select(CDSCode, heat_days, heat_score)

precip <- rbind(precip_0, precip_intervals) %>% 
  mutate(precip_score = as.numeric(precip_score)) %>% 
  select(CDSCode, precip_days, precip_score)

wildfire <- wildfire %>% 
  mutate(whp_score = as.numeric(whp_score)) %>% 
  select(CDSCode, whp_score)

flood <- rbind(flood_0, flood_intervals) %>% 
  mutate(flood_score = as.numeric(flood_score)) %>% 
  select(CDSCode, flood_percent, flood_score)

slr <- rbind(slr_0, slr_intervals) %>% 
  mutate(slr_score = as.numeric(slr_score)) %>% 
  select(CDSCode, slr_percent, slr_score)

## join all of the tables together and calculate the hazard summary score

# join tables
districts_hazards <- districts %>% 
  left_join(heat, by = "CDSCode") %>% 
  left_join(precip, by = "CDSCode") %>% 
  left_join(wildfire, by = "CDSCode") %>% 
  left_join(slr, by = "CDSCode") %>% 
  left_join(flood, by = "CDSCode")

# calculate the hazard summary score for each district
districts_hazards <- districts_hazards %>% 
  mutate(hazard_score = heat_score + flood_score + slr_score + precip_score + whp_score)

# select relevant columns
districts_hazards <- districts_hazards %>% 
  select(CDSCode, CountyName, DistrictNa, DistrictTy, heat_days, heat_score, precip_days, precip_score, whp_score, flood_percent, flood_score, slr_percent, slr_score, hazard_score)

## write output to the data folder
# geopackage to preserve field names
st_write(districts_hazards, here("data", "hazard_summary", "hazard_summary", "hazard_summary.gpkg"), append = FALSE)

# csv
districts_hazards %>% 
  st_drop_geometry() %>% 
  write_csv(here("data", "hazard_summary", "districts_hazards.csv"))
```

# binning by interval for our older data

To bin the historic/past data, we use the same intervals as a reference

```{r}
# read in historic/past climate hazards data
heat_hist <- read_csv(here("data", "hazard_summary", "individual_tables", "districts_heat_hist.csv"))

precip_hist <- read_csv(here("data", "hazard_summary", "individual_tables", "districts_precip_hist.csv"))

wildfire_2012 <- read_csv(here("data", "hazard_summary", "individual_tables", "districts_whp_2012.csv"))

slr_2000 <- read_csv(here("data", "hazard_summary", "individual_tables", "districts_slr_2000.csv"))
```

```{r}
## separate observations from each dataframe into 0s and not 0 ------------------------------------------

# rename whp to whp_score
wildfire_hist <- wildfire_2012 %>% 
  rename(whp_score = whp_2012)

# separate into 0s
heat_0_hist <- heat_hist %>% 
  filter(heat_days == 0) %>%
  mutate(heat_score = heat_days) %>% 
  select(-geometry)

precip_0_hist <- precip_hist %>% 
  filter(precip_days == 0) %>% 
  mutate(precip_score = precip_days) %>% 
  select(-geometry)

slr_0_hist <- slr_2000 %>% 
  filter(slr_percent == 0) %>%
  mutate(slr_score = slr_percent)

# separate into values
heat_num_hist <- heat_hist %>% 
  filter(heat_days != 0)

precip_num_hist <- precip_hist %>% 
  filter(precip_days != 0)

slr_num_hist <- slr_2000 %>% 
  filter(slr_percent != 0)

## bin the dataframes with values into intervals based on the equal range intervals of the projected data. Since wildfire is already on a scale from 0-5, we don't need to transform it. --------------------------- 

# manually define intervals from projected data and use them as breaks to cut the historic data
heat_breaks <- cut_interval(heat_num$heat_days, n = 5) %>% 
  levels()

heat_breaks <- c(1, 240, 479, 719, 958, 1198)

precip_breaks <- cut_interval(precip_num$precip_days, n = 5) %>% 
  levels()

precip_breaks <- c(1, 176, 351, 525, 700, 876)

slr_breaks <- cut_interval(slr_num$slr_percent, n = 5) %>% 
  levels()

slr_breaks <- c(0, 11.9, 23.8, 35.8, 47.7, 59.7)

# bin the historic numeric dataframes
heat_intervals_hist <- heat_num_hist %>% 
  mutate(heat_score = cut(heat_days, breaks = heat_breaks, 
                          labels = c(1:5), include.lowest = TRUE)) %>% 
  select(-geometry)

precip_intervals_hist <- precip_num_hist %>% 
  mutate(precip_score = cut(precip_days, breaks = precip_breaks,
                            labels = c(1:5), include.lowest = TRUE)) %>% 
  select(-geometry)

slr_intervals_hist <- slr_num_hist %>% 
  mutate(slr_score = cut(slr_percent, breaks = slr_breaks,
                         labels = c(1:5), include.lowest = TRUE))

## row bind the intervals and 0s dataframes back together ---------------------------------------------
heat_hist <- rbind(heat_0_hist, heat_intervals_hist) %>% 
  mutate(heat_score = as.numeric(heat_score)) %>% 
  select(CDSCode, heat_days, heat_score) %>% 
  rename(heat_days_hist = heat_days,
         heat_score_hist = heat_score)

precip_hist <- rbind(precip_0_hist, precip_intervals_hist) %>% 
  mutate(precip_score = as.numeric(precip_score)) %>% 
  select(CDSCode, precip_days, precip_score) %>% 
  rename(precip_days_hist = precip_days,
         precip_score_hist = precip_score)

wildfire_hist <- wildfire_hist %>% 
  mutate(whp_score = as.numeric(whp_score)) %>% 
  select(CDSCode, whp_score) %>% 
  rename(whp_score_hist = whp_score)

slr_hist <- rbind(slr_0_hist, slr_intervals_hist) %>% 
  mutate(slr_score = as.numeric(slr_score)) %>% 
  select(CDSCode, slr_percent, slr_score) %>% 
  rename(slr_pct_hist = slr_percent,
         slr_score_hist = slr_score)

## join the table to the projected districts hazards dataframe -------------------------------------------
# join historic tables
districts_hazards_hist <- heat_hist %>% 
  left_join(precip_hist, by = "CDSCode") %>% 
  left_join(wildfire_hist, by = "CDSCode") %>% 
  left_join(slr_hist, by = "CDSCode")

# join to the districts hazards dataframe and reorder columns
districts_hazards <- districts_hazards %>% 
  left_join(districts_hazards_hist, by = "CDSCode")

districts_hazards <- districts_hazards %>% 
  relocate(hazard_score, .after = DistrictTy) %>% 
  relocate(heat_days_hist, .after = heat_days) %>% 
  relocate(heat_score_hist, .after = heat_score) %>% 
  relocate(precip_days_hist, .after = precip_days) %>% 
  relocate(precip_score_hist, .after = precip_score) %>% 
  relocate(whp_score_hist, .after = whp_score) %>% 
  relocate(slr_pct_hist, .after = slr_percent) %>% 
  relocate(slr_score_hist, .after = slr_score)

## write output to the data folder
# geopackage to preserve field names
st_write(districts_hazards, here("data", "hazard_summary", "hazard_summary", "hazard_summary.gpkg"), append = FALSE)

# csv
districts_hazards %>% 
  st_drop_geometry() %>% 
  write_csv(here("data", "hazard_summary", "districts_hazards.csv"))
```








# starting on visuals

This notebook will contain visualizations like tables or maps. I'll do any maps in the individual hazard pages
```{r}
districts_hazards <- st_read(here("data", "hazard_summary", "hazard_summary", "hazard_summary.gpkg"))

```

Ideas for visuals

Maps - wildfire, flooding, sea level rise. For wildfire and sea level rise, we can actually show where these things occur. More difficult for flooding, but it can be done. We can show where the high risk flood zones are in a school district. Can also just show the colors on a statewide view, split by elementary, high, and unified districts

Maps

```{r}
# read in CA boundary
ca <- st_read(here("data", "school_districts", "CA_boundary")) %>% 
  st_transform(crs = 3857)
```


## Maps for extreme heat and extreme precipitation

```{r}
# total extreme heat days for all
tm_shape(districts_hazards) +
  tm_polygons(fill = "heat_days",
              palette = "oranges",
              title = "projected extreme heat days") +
  tm_layout(frame = FALSE)

# faceted by district type
tm_shape(districts_hazards) +
  tm_polygons(fill = "heat_days",
              palette = "oranges",
              title = "projected extreme heat days") +
  tm_facets(by = "DistrictTy") +
  tm_shape(ca) +
  tm_borders() +
  tm_layout(frame = FALSE)

# by heat score
tm_shape(districts_hazards %>% 
           mutate(heat_score = as.factor(heat_score))) +
  tm_polygons(fill = "heat_score",
              palette = "oranges",
              title = "extreme heat hazard score") +
  tm_layout(frame = FALSE)

# faceted by district type
tm_shape(districts_hazards %>% 
           mutate(heat_score = as.factor(heat_score))) +
  tm_polygons(fill = "heat_score",
              palette = "oranges",
              title = "extreme heat hazard score") +
  tm_facets(by = "DistrictTy") +
  tm_shape(ca) +
  tm_borders() +
  tm_layout(frame = FALSE)

```


```{r}
# total extreme precip days for all
tm_shape(districts_hazards) +
  tm_polygons(fill = "precip_days",
              palette = "blues",
              title = "projected extreme precipitation days") +
  tm_layout(frame = FALSE)

# faceted by district type
tm_shape(districts_hazards) +
  tm_polygons(fill = "precip_days",
              palette = "blues",
              title = "projected extreme precip days") +
  tm_facets(by = "DistrictTy") +
  tm_shape(ca) +
  tm_borders() +
  tm_layout(frame = FALSE)

# by precip score
tm_shape(districts_hazards %>% 
           mutate(precip_score = as.factor(heat_score))) +
  tm_polygons(fill = "precip_score",
              palette = "blues",
              title = "extreme precipitation hazard score") +
  tm_layout(frame = FALSE)

# faceted by district type
tm_shape(districts_hazards %>% 
           mutate(precip_score = as.factor(heat_score))) +
  tm_polygons(fill = "precip_score",
              palette = "blues",
              title = "extreme precipitation hazard score") +
  tm_facets(by = "DistrictTy") +
  tm_shape(ca) +
  tm_borders() +
  tm_layout(frame = FALSE)
```

## tables

# extreme heat

```{r}
# histogram of extreme heat days
ggplot(districts_hazards) +
  geom_histogram(aes(heat_days), color = "black", fill = "orange") +
  theme_minimal() +
  labs(x = "projected extreme heat days", y = "count of districts")

# boxplots of extreme heat days by district type
ggplot(districts_hazards, aes(y = reorder(DistrictTy, heat_days, FUN = median), x = heat_days)) +
  geom_boxplot(fill = "orange", color = "black") +
  theme_minimal() +
  labs(x = "projected extreme heat days", y = "district type")
```

- boxplots: order by median

# extreme precipitation

```{r}
# histogram of extreme precip days
ggplot(districts_hazards) +
  geom_histogram(aes(precip_days), color = "black", fill = "lightblue") +
  theme_minimal() +
  labs(x = "projected extreme heat days", y = "count of districts")

# boxplots of extreme precip days by district type
ggplot(districts_hazards, aes(y = reorder(DistrictTy, precip_days, FUN = median), x = precip_days)) +
  geom_boxplot(fill = "lightblue", color = "black") +
  theme_minimal() +
  labs(x = "projected extreme precipitation days", y = "district type")
```

# total hazard score

```{r}
ggplot(districts_hazards) +
  geom_bar(aes(x = hazard_score)) +
  theme_minimal()
```

