---
title: "Calculating the projected effects of sea level rise on school districts"
format: html
author: Charlie Curtin
---

```{r, message = FALSE}
library(sf)
library(tidyverse)
library(leaflet)
library(here)

# turn off scientific notation
options(scipen = 999)
```

# Working with 2050 projected sea levels and the effects of a 100-year coastal storm from CoSMoS

We are using data from the USGS Coastal Storm Modeling system, or CoSMoS. The data we downloaded are polygons describing the extent of coastal flooding under a .8 ft sea level rise scenario (which is an intermediate 2050 scenario) and a 100-year coastal storm. The data covers coastal areas from San Diego County north to Point Arena in Mendocino County, but lacks coverage of the coastal areas north of there. It also covers the San Francisco Bay inner coastline. The values are given in centimeters, with .8 feet equaling 25 cm. 

We have 14 different shapefiles for sea level rise. To read them and combine them into one sf object, we need to write a function. Not all of the shapefiles are on the same crs, and we want all of them to be on the same crs as the ca schools layer. So, we're just going to convert them all to the crs of the schools buffers. Each of the layers also has different amounts of columns, so we're only going to select the geometry column in order to be able to combine all of the shapefiles into one. The function reads in a shapefile, converts the coordinate reference system, and then drops all columns except for the geometry column. Then, we use lapply to apply the function to each shapefile in our list, returning a list. Then, we merge all of the shapefiles into one. The sea level rise polygons extend out from the coast, so we'll crop them to the coastline.

```{r}
# list 2050 sea level rise polygons
ca_slr_files <- list.files(here("data", "sea_level_rise", "raw", "2050"), pattern = "*.shp", full.names = TRUE)

# function to read in sea level rise files and transform the crs to the crs of the school districts
read_transform_crs <- function(slr_files, target_crs = 3857) {
  
  # read in shapefile
  shapefile <- st_read(slr_files, quiet = TRUE)
  
  # convert crs of the shapefile to the target crs
  shapefile <- st_transform(shapefile, crs = target_crs)
  
  # extract only the geometry columns
  geometry <- st_geometry(shapefile)
  
  # return shapefile as sf object
  return(st_sf(geometry = geometry))
}

# apply the function to each shapefile in the 2050 data
slr_shapefiles <- lapply(ca_slr_files, read_transform_crs)

# merge all shapefiles into one sf object
ca_slr <- do.call(rbind, slr_shapefiles)

# write result to the data folder
#ca_slr <- st_write(ca_slr, here("data", "sea_level_rise", "intermediate", "ca_slr.shp"))
```

```{r}
# read in school districts
districts <- st_read(here("data", "school_districts"), quiet = TRUE)

# read in CA sea level rise data
ca_slr <- st_read(here("data", "sea_level_rise", "intermediate", "ca_slr.shp"))
```

## Calculating the percentage of area of every school district inundated under 2050 sea levels and a 100-year coastal storm

Next, we are going to find the intersections. We are going to find the area of intersection of the sea level rise polygon on each school district. Then, we are going to calculate the areas using st_area, and join the two dataframes together. The units are in square meters. The first line of code using st_intersection creates new polygons that are the overlap between each school district and the coastal flooding area. Each intersection polygon is associated with a specific school ID (CDSCode), so polygons are duplicated where they intersect with multiple school buffer areas. Additionally, multiple original sea level rise polygons can fall within one school district. For this reason, we need to sum all of the sea level rise areas associated with each CDSCode to find the total area of each school district affected by sea level rise and a coastal storm.

```{r}
# find the intersections between school districts and sea level rise polygons
districts_slr <- st_intersection(districts, ca_slr)

# find the area of each intersection polygon
districts_slr$slr_area <- st_area(districts_slr)

# also find the area of each original school district to compare
districts$area <- st_area(districts)

## join the two together
# select only necessary columns to join
districts_slr <- districts_slr %>% 
  select(CDSCode, slr_area)

# group by CDSCode (unique school id) and sum all of the sea level rise areas
districts_slr <- districts_slr %>% 
  group_by(CDSCode) %>% 
  summarise(slr_area = sum(slr_area))

# conduct a join to join the districts with sea level rise back to all of the school districts, converting the sf objects into dataframes
slr_ca_join <- full_join(districts %>% as.data.frame(), 
                     districts_slr %>% as.data.frame(), 
                     by = "CDSCode", keep = FALSE) %>% 
  mutate(area = as.numeric(area), # convert areas to numeric, dropping the units
         slr_area = as.numeric(slr_area)) %>% 
  mutate(slr_area = replace_na(slr_area, 0)) %>% # replace NAs with 0s
  mutate(slr_percent = (slr_area / area) * 100) %>% # calculate sea level rise inundation percentage
  st_sf(sf_column_name = "geometry.x") # convert back to an sf object

# select relevant information and export to data folder for hazard summary calculation
slr_districts <- slr_ca_join %>% 
  select(CDSCode, CountyName, DistrictNa, DistrictTy, slr_percent) %>% 
  st_drop_geometry()

#write_csv(slr_districts, here("data", "hazard_summary", "individual_tables", "districts_slr.csv"))
```

# Working with 2000 sea levels and the effects of a 100-year coastal storm from CoSMoS

CoSMoS sea level rise is based off of 2000 sea levels, so the 2000 sea level rise data simply represents the effects of a 100-year coastal storm without any additional sea level rise. We are going to repeat the above process with this data.

```{r}
# list 2000 sea level rise polygons
slr_2000_files <- list.files(here("data", "sea_level_rise", "raw", "2000"), pattern = "*.shp", full.names = TRUE)

# apply the function to each shapefile in the 2050 data
slr_2000_shapefiles <- lapply(slr_2000_files, read_transform_crs)

# merge all shapefiles into one sf object
slr_2000 <- do.call(rbind, slr_2000_shapefiles)

# write result to the data folder
#ca_slr_2000 <- st_write(slr_2000, here("data", "sea_level_rise", "intermediate", "ca_slr_2000.shp"))
```

```{r}
# find the intersections between school districts and sea level rise polygons
districts_slr_2000 <- st_intersection(districts, ca_slr_2000)

# find the area of each intersection polygon
districts_slr_2000$slr_area <- st_area(districts_slr_2000)

# also find the area of each original school district to compare
districts$area <- st_area(districts)

## join the two together
# select only necessary columns to join
districts_slr_2000 <- districts_slr_2000 %>% 
  select(CDSCode, slr_area)

# group by CDSCode (unique school id) and sum all of the sea level rise areas
districts_slr_2000 <- districts_slr_2000 %>% 
  group_by(CDSCode) %>% 
  summarise(slr_area = sum(slr_area))

# conduct a join to join the districts with sea level rise back to all of the school districts, converting the sf objects into dataframes
slr_ca_2000_join <- full_join(districts %>% as.data.frame(), 
                     districts_slr_2000 %>% as.data.frame(), 
                     by = "CDSCode", keep = FALSE) %>% 
  mutate(area = as.numeric(area), # convert areas to numeric, dropping the units
         slr_area = as.numeric(slr_area)) %>% 
  mutate(slr_area = replace_na(slr_area, 0)) %>% # replace NAs with 0s
  mutate(slr_percent = (slr_area / area) * 100) %>% # calculate sea level rise inundation percentage
  st_sf(sf_column_name = "geometry.x") # convert back to an sf object

# select relevant information and export to data folder for hazard summary calculation
slr_districts_2000 <- slr_ca_2000_join %>% 
  select(CDSCode, CountyName, DistrictNa, DistrictTy, slr_percent) %>% 
  st_drop_geometry()

#write_csv(slr_districts_2000, here("data", "hazard_summary", "individual_tables", "districts_slr_2000.csv"))
```

## Preparing data to map sea level rise

```{r}
# read in 2050 sea level rise data
ca_slr <- st_read(here("data", "sea_level_rise", "intermediate", "ca_slr.shp"))

# read in 2000 sea level rise data
ca_slr_2000 <- st_read(here("data", "sea_level_rise", "intermediate", "ca_slr_2000.shp"))

# CA boundary
ca <- st_read(here("data", "school_districts", "CA_boundary"))
```

We are going to clip the sea level rise polygons to the boundary of California to exclude data that's in the ocean. Then we will simplify the polygons for mapping. Simplification reduces the amount of vertices in a polygon to make mapping quicker.

```{r}
# clip slr layers to CA boundary
ca_slr <- st_intersection(ca_slr, ca)

ca_slr_2000 <- st_intersection(ca_slr_2000, ca)

# simplify vertices
ca_slr_simple <- st_simplify(ca_slr, dTolerance = 10)

ca_slr_2000_simple <- st_simplify(ca_slr_2000, dTolerance = 10)

# write outputs to server
st_write(ca_slr_simple, here("data", "sea_level_rise", "intermediate", "ca_slr_simple.shp"))

st_write(ca_slr_2000_simple, here("data", "sea_level_rise", "intermediate", "ca_slr_2000_simple.shp"))
```

