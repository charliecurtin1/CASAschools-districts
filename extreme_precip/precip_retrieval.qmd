---
title: "Accessing Extreme precip days for all districts at RCP 8.5"
format: html
author: "Charlie Curtin"
---

```{r, message = FALSE}
# load libraries
library(devtools)
library(caladaptr)
library(tidyverse)
library(sf)
library(here)
library(progress) # for loop progress bar
library(lubridate)

# install caladaptr to construct an API request for climate data from Cal-Adapt
#devtools::install_github("ucanr-igis/caladaptr")

options(scipen = 999)
```

```{r}
# read in school districts, validate geometry, and change the crs to WGS 1984
districts <- st_read(here("data", "school_districts"), quiet = TRUE) %>% 
  st_make_valid() %>% 
  st_transform(crs = 4326)
```

```{r}
# create an empty data frame to populate with the number of extreme precipitation days
extreme_precip_days <- data.frame()

# create an empty vector to store the codes of districts that encounter an error
precip_errors <- c()

# create a progress bar for our for loop
pb <- progress_bar$new(
  format = "  [:bar] :current/:total (:percent) elapsed: :elapsed full",
  total = nrow(districts), clear = FALSE, width = 60
)

# create a for loop for school districts
for (code in districts$CDSCode) {
   
  # iterate through one row at a time
  df <- districts %>% 
    filter(CDSCode == code)
  
  # wrap in tryCatch function, which tells the for loop to continue iterating if it encounters an error
  tryCatch({
    # create the API request
    request <-  ca_loc_sf(loc = df, idfld = "CDSCode") %>% 
      # select our variable of interest, where "pr" is daily precipitation
      ca_cvar(cvar = "pr") %>% 
      # select RCP 8.5 scenario
      ca_scenario(c("rcp85")) %>% 
      # select 4 GCMs of interest
      ca_gcm(gcms[1:4]) %>% 
      # select daily values
      ca_period("day") %>% 
      # select period of interest
      ca_years(start = 2030, end = 2035)
    
    # calculate whether a day is an extreme precipitation day or not
    districts_precip <- request %>% 
      # extract values from request as a table, converting values to be numeric
      ca_getvals_tbl(quiet = TRUE) %>% 
      mutate(val = as.numeric(val)) %>%
      # convert from kg/m^2/s to in/day
      mutate(val = val * 3401.58) %>% 
      # assign a 1 to each daily value for each school district if ANY projected precipitation total from any of the 4 GCMs exceeds the threshold
      group_by(CDSCode, dt) %>% 
      summarize(threshold = ifelse(any(val > .74), 1, 0)) %>%
      # count the number of extreme precipitation days
      group_by(CDSCode) %>% 
      summarize(count = sum(threshold))
    
    extreme_precip_days <- rbind(extreme_precip_days, districts_precip)
    
    },
    error = function(e) {
      # store the district code in error_districts if there's an error
      precip_errors <<- c(precip_errors, code)
    })
  
  # update progress bar
  pb$tick()
  
} # end for loop

# export CSV
#write_csv(extreme_precip_days, here("data", "extreme_precip", "intermediate", "extreme_precip_days_noerrors.csv"))
```


Working with errors

One issue with this randomness of points is that you seem to get pretty different results between different assignment of points
```{r}
# filter for districts that encounter an error
error_districts <- districts %>% 
  filter(CDSCode %in% precip_errors$CDSCode)

# create an empty dataframe to populate with the number of extreme precip days
extreme_precip_days_errors <- data.frame()

# create a progress bar for our for loop
pb <- progress_bar$new(
  format = "  [:bar] :current/:total (:percent) elapsed: :elapsed full",
  total = nrow(districts), clear = FALSE, width = 60
)

# create a for loop for school districts
for (code in error_districts$CDSCode) {
   
  # iterate through one row at a time
  df <- error_districts %>% 
    filter(CDSCode == code)
  
  # generate 5 random points for each district and convert to coordinates
  errors_points <- st_sample(error_districts, 5)
  
  errors_points <- st_transform(errors_points, crs = "EPSG:4326" ) %>% 
  st_coordinates()
  
  # wrap in tryCatch function, which tells the for loop to continue iterating if it encounters an error
  tryCatch({
    # create the API request with points instead of polygons
    request <-  ca_loc_pt(coords = errors_points) %>% 
      ca_cvar(cvar = "pr") %>% 
      ca_scenario(c("rcp85")) %>% 
      ca_gcm(gcms[1:4]) %>% 
      ca_period("day") %>% 
      ca_years(start = 2030, end = 2035)
    
    # average the values of the 5 points for each district
    errors_precip <- request %>% 
      ca_getvals_tbl(quiet = TRUE) %>% 
      mutate(val = as.numeric(val),
             val = val * 3401.58) %>% 
      group_by(gcm, dt) %>% 
      summarise(val = mean(val)) %>%
       # assign a 1 to each daily value for each school district if ANY projected precipitation total from any of the 4 GCMs exceeds the threshold
      group_by(dt) %>% 
      summarize(threshold = ifelse(any(val > .74), 1, 0)) %>% 
      # count the number of extreme precipitation days
      summarize(count = sum(threshold))
    
    # assign CDS code back to the point
    errors_precip$CDSCode <- code
    
    # bind results from each iteration together
    extreme_precip_days_errors <- rbind(extreme_precip_days_errors, errors_precip)
    
    },
    error = function(e) {
      # store the district code in error_districts if there's an error
      #precip_errors <<- c(precip_errors, code)
    })
  
  # update progress bar
  pb$tick()
  
} # end for loop

# write results to data folder
#write_csv(extreme_precip_days_errors, here("data", "extreme_precip", "intermediate", "extreme_precip_days_errors.csv"))
```

# bind dataframes together and join back to full school districts data
```{r}
# bind the errors and noerrors dataframes together and export to data folder
extreme_precip_days_full <- rbind(extreme_precip_days_noerrors, extreme_precip_days_errors)

#write_csv(extreme_precip_days_full, here("data", "extreme_precip", "intermediate", "extreme_precip_days_full.csv"))

# join back to school districts dataframe
districts_precip <- left_join(districts, extreme_precip_days_full, by = "CDSCode") %>% 
  mutate(precip_days = count) %>% 
  select(CDSCode, CountyName, DistrictNa, DistrictTy, precip_days)

# export to data folder
write_csv(districts_precip, here("data", "hazard_summary", "individual_tables", "districts_precip.csv"))
```

## Retrieving historical data

```{r}
# create an empty data frame to populate with the number of extreme heat days
extreme_precip_days_hist <- data.frame()

# create an empty vector to store the codes of districts that encounter an error with the for loop
precip_errors <- c()

# create a progress bar for our for loop
pb <- progress_bar$new(
  format = "  [:bar] :current/:total (:percent) elapsed: :elapsed full",
  total = nrow(districts), clear = FALSE, width = 60
)

# retrieve data using the Cal-Adapt API in a for loop
for (code in districts$CDSCode) {
   
  # iterate through one row at a time
  df <- districts %>% 
    filter(CDSCode == code)
  
  # wrap in tryCatch function, which tells the for loop to continue iterating if it encounters an error
  tryCatch({
    # create the API request
    request <-  ca_loc_sf(loc = df, idfld = "CDSCode") %>% 
      # select our variable of interest, where "pr" is precipitation
      ca_cvar(cvar = "pr") %>% 
      # select the dataset we retrieve from, where Livneh is the historical climate observations
      ca_livneh(TRUE) %>% 
      # select daily values
      ca_period("day") %>% 
      # select period of interest
      ca_years(start = 2008, end = 2013)
    
    # calculate whether a day is an extreme precipitation day or not
    districts_precip <- request %>% 
      # extract values from request as a table, converting values to be numeric
      ca_getvals_tbl(quiet = TRUE) %>% 
      mutate(val = as.numeric(val)) %>% 
      mutate(threshold = ifelse(val > 18.8, 1, 0)) %>% 
      group_by(CDSCode) %>% 
      summarize(count = sum(threshold))
    
    # bind results from each iteration to our empty dataframe we defined outside of the for loop
    extreme_precip_days_hist <- rbind(extreme_precip_days_hist, districts_precip)
    
    },
    error = function(e) {
      # store the district code if there's an error
      precip_errors <<- c(precip_errors, code)
    })
  
  # update progress bar
  pb$tick()
  
} # end for loop

# export CSV
write_csv(extreme_precip_days_hist, here("data", "extreme_precip", "intermediate", "extreme_precip_days_noerrors_hist.csv"))
```

## working with errors

```{r}
# filter for districts that encounter an error
error_districts <- districts %>% 
  filter(CDSCode %in% precip_errors)

# create an empty dataframe to populate with the number of extreme heat days
extreme_precip_days_errors_hist <- data.frame()

# create a progress bar for our for loop
pb <- progress_bar$new(
  format = "  [:bar] :current/:total (:percent) elapsed: :elapsed full",
  total = nrow(districts), clear = FALSE, width = 60
)

# create a for loop for school districts
for (code in error_districts$CDSCode) {
  
  # iterate through one row at a time
  df <- error_districts %>% 
    filter(CDSCode == code)
  
  # generate 5 random points for each district and convert to coordinates
  errors_points <- st_sample(error_districts, 5)
  
  errors_points <- st_transform(errors_points, crs = "EPSG:4326" ) %>% 
    st_coordinates()
  
  # wrap in tryCatch function, which tells the for loop to continue iterating if it encounters an error
  tryCatch({
    # create the API request
    request <- ca_loc_pt(coords = errors_points) %>% 
      # select our variable of interest, where "pr" is daily rainfall total
      ca_cvar(cvar = "pr") %>% 
      # select the dataset we retrieve from, where Livneh is the historical climate observations
      ca_livneh(TRUE) %>% 
      # select daily values
      ca_period("day") %>% 
      # select period of interest
      ca_years(start = 2008, end = 2013)
    
    # average the values of the 5 points for each district
    errors_precip <- request %>% 
      ca_getvals_tbl(quiet = TRUE) %>% 
      mutate(val = as.numeric(val)) %>% 
      group_by(dt) %>% 
      summarise(val = mean(val)) %>% 
      mutate(threshold = ifelse(val > 18.8, 1, 0)) %>% 
      summarize(count = sum(threshold))
    
    # assign CDSCode back to the point
    errors_precip$CDSCode <- code
    
    # bind results from each iteration together
    extreme_precip_days_errors_hist <- rbind(extreme_precip_days_errors_hist, errors_precip)
    
  },
  error = function(e) {
    # store the district code in error_districts if there's an error
    #temp_errors <<- c(temp_errors, code)
  })
  
  # update progress bar
  pb$tick()
  
} # end for loop

# export results to data folder
write_csv(extreme_precip_days_errors_hist, here("data", "extreme_precip", "intermediate", "extreme_precip_days_errors_hist.csv"))
```

# bind dataframes together and join back to full school districts data

```{r}
# bind the errors and noerrors dataframes together and export to data folder
extreme_precip_days_full_hist <- rbind(extreme_precip_days_hist, extreme_precip_days_errors_hist)

#write_csv(extreme_precip_days_full_hist, here("data", "extreme_precip", "intermediate", "extreme_precip_days_full_hist.csv"))

# join back to school districts dataframe
districts_precip_hist <- left_join(districts, extreme_precip_days_full_hist, by = "CDSCode") %>% 
  mutate(precip_days = count) %>% 
  select(CDSCode, CountyName, DistrictNa, DistrictTy, precip_days)

# export to data folder
#write_csv(districts_precip_hist, here("data", "hazard_summary", "individual_tables", "districts_precip_hist.csv"))
```

